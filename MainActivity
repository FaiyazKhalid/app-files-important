package com.advocatepedia.search

import AdvocateAdapter
import android.annotation.SuppressLint
import android.content.ActivityNotFoundException
import android.content.Context
import android.content.Intent
import android.graphics.Typeface
import android.net.Uri
import android.os.Bundle
import android.os.Handler
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.Gravity
import android.view.View
import android.widget.ArrayAdapter
import android.widget.AutoCompleteTextView
import android.widget.Button
import android.widget.ImageView
import android.widget.ProgressBar
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView

import com.squareup.picasso.Picasso
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.Request
import org.json.JSONArray
import org.json.JSONObject
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.io.IOException
import java.net.URL
import java.net.URLEncoder


class MainActivity : AppCompatActivity() {

    private lateinit var submitButton: TextView
    private lateinit var loginButton: TextView
    private lateinit var dash: TextView
    private lateinit var changeCourtButton: TextView
    private lateinit var viweAll: TextView

    private lateinit var autoCompleteTextView: AutoCompleteTextView
    private lateinit var recyclerView: RecyclerView
    private lateinit var advocateAdapter: AdvocateAdapter
    private lateinit var wikiUserTextView: TextView
    private lateinit var whatsappButton1: Button
    private var progressBar: ProgressBar? = null
    private val handler = Handler()
    private val updateInterval: Long = 10000 // 10 seconds
    private val client = OkHttpClient()

    @SuppressLint("MissingInflatedId")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        initializeViews()
        setupButtons()
        setupAutoComplete()
        fetchJudgmentData()
        recyclerView.layoutManager = LinearLayoutManager(this)
        advocateAdapter = AdvocateAdapter()
        recyclerView.adapter = advocateAdapter
        progressBar = findViewById(R.id.progressBar);

        // Example: Simulate a loading process
        loadData();
        fetchAdvocates()
        fetchDailyStoryData()
        val sharedPreferences = getSharedPreferences("MyAppPreferences", Context.MODE_PRIVATE)
        val court = sharedPreferences.getString("selectedDistrict", "")



        handler.postDelayed(object : Runnable {
            override fun run() {
                fetchAdvocates()
                if (court != null) {
                    fetchUserData(court)
                }
                fetchJudgmentData()

                handler.postDelayed(this, updateInterval)
            }
        }, updateInterval)


    }

    private fun loadData() {
        // Show the ProgressBar
        progressBar!!.visibility = View.VISIBLE

        // Simulate loading data with a delay (replace this with your actual loading logic)
        Handler().postDelayed(
            { // Hide the ProgressBar after loading completes
                progressBar!!.visibility = View.GONE
            }, 3000
        ) // 3 seconds delay
    }

    private fun initializeViews() {
        submitButton = findViewById(R.id.sendUp)
        loginButton = findViewById(R.id.mylogin)
        dash = findViewById(R.id.dashboard)
        changeCourtButton = findViewById(R.id.change_court_button)
        autoCompleteTextView = findViewById(R.id.autoCompleteTextView)
        recyclerView = findViewById(R.id.recyclerView)
        wikiUserTextView = findViewById(R.id.wiki_user_text_main)
        whatsappButton1 = findViewById(R.id.whatsappButton1)
        viweAll = findViewById(R.id.allview)

    }

    private fun setupButtons() {
        loginButton.setOnClickListener {
            startActivity(Intent(this, LoginActivity::class.java))
        }
        viweAll.setOnClickListener {
            startActivity(Intent(this, InternSeeker::class.java))
        }
        submitButton.setOnClickListener {
            startActivity(Intent(this, RegisterActivity::class.java))
        }
        dash.setOnClickListener {
            startActivity(Intent(this, DashboardActivity::class.java))
        }
        changeCourtButton.setOnClickListener {
            val sharedPreferences = getSharedPreferences("MyAppPreferences", Context.MODE_PRIVATE)
            sharedPreferences.edit().apply {
                remove("selectedState")
                remove("selectedDistrict")
                apply()
            }
            startActivity(Intent(this, SelectionActivity::class.java))
            finish()
        }
    }

    private fun setupAutoComplete() {
        // Set up the AutoCompleteTextView
        autoCompleteTextView.threshold = 1
        autoCompleteTextView.setOnItemClickListener { _, _, _, _ ->
            val query = autoCompleteTextView.text.toString()
            loadWikipediaPage(query)
        }

        autoCompleteTextView.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
            override fun afterTextChanged(s: Editable?) {
                s?.toString()?.let { query ->
                    if (query.length >= 1) {
                        fetchSuggestions(query)
                    }
                }
            }
        })

        // Set up the search button to trigger the search when clicked
        val searchButton: Button = findViewById(R.id.searchButton)
        searchButton.setOnClickListener {
            val query = autoCompleteTextView.text.toString()
            if (query.isNotEmpty()) {
                loadWikipediaPage(query)  // Load the Wikipedia page or other action based on query
            } else {
                Toast.makeText(this, "Please enter a search query", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun fetchSuggestions(query: String) {
        lifecycleScope.launch {
            try {
                val suggestions = withContext(Dispatchers.IO) {
                    val encodedQuery = query.replace(" ", "%20") // Manually replace spaces with %20
                    val url = URL("https://advocatepedia.com/api.php?action=opensearch&format=json&search=$encodedQuery")
                    val response = url.readText()
                    val jsonResponse = JSONArray(response)
                    val suggestionsArray = jsonResponse.getJSONArray(1)
                    List(suggestionsArray.length()) { i -> suggestionsArray.getString(i) }
                }
                updateAutoComplete(suggestions)
            } catch (e: Exception) {
                Log.e("MainActivity", "Error fetching suggestions: ${e.message}")
                Toast.makeText(this@MainActivity, "Error fetching suggestions: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun updateAutoComplete(suggestions: List<String>) {
        val adapter = ArrayAdapter(this, android.R.layout.simple_dropdown_item_1line, suggestions)
        autoCompleteTextView.setAdapter(adapter)
        adapter.notifyDataSetChanged()
    }

    private fun loadWikipediaPage(query: String) {
        val encodedQuery = query.replace(" ", "%20") // Replace spaces with %20 to avoid "+" symbol
        val url = "https://advocatepedia.com/$encodedQuery"
        val intent = Intent(this, WebActivity::class.java)
        intent.putExtra("url", url)
        startActivity(intent)
    }



    private fun fetchAdvocates() {
        val sharedPreferences = getSharedPreferences("MyAppPreferences", Context.MODE_PRIVATE)
        val savedDistrict = sharedPreferences.getString("selectedDistrict", "") ?: ""

        val retrofit = Retrofit.Builder()
            .baseUrl("https://internship.advocatepedia.com/android/")
            .addConverterFactory(GsonConverterFactory.create())
            .build()

        val apiInterface = retrofit.create(com.advocatepedia.search.ApiInterface::class.java)

        apiInterface.getAdvocates(court = savedDistrict)
            .enqueue(object : Callback<List<com.advocatepedia.search.Advocate>> {
                override fun onResponse(
                    call: Call<List<com.advocatepedia.search.Advocate>>,
                    response: Response<List<com.advocatepedia.search.Advocate>>
                ) {
                    if (response.isSuccessful) {
                        response.body()?.let { advocates ->
                            advocateAdapter.updateData(advocates)
                        }
                    } else {
                        Toast.makeText(this@MainActivity, "Please select Court", Toast.LENGTH_SHORT)
                            .show()
                    }
                }

                override fun onFailure(
                    call: Call<List<com.advocatepedia.search.Advocate>>,
                    t: Throwable
                ) {
                    //  Toast.makeText(this@MainActivity, "We don't have Advocate Directory of $savedDistrict. Please mail us the directory.", Toast.LENGTH_SHORT).show()
                }
            })
    }

    private fun fetchUserData(court: String) {
        // Show the ProgressBar before starting the request
        runOnUiThread {
            findViewById<ProgressBar>(R.id.progressBar2).visibility = View.VISIBLE
        }

        val url = "https://internship.advocatepedia.com/android/internship-view.php?court=$court"

        val request = Request.Builder()
            .url(url)
            .build()

        client.newCall(request).enqueue(object : okhttp3.Callback {
            override fun onFailure(call: okhttp3.Call, e: IOException) {
                Log.e("RetrieveActivity", "Error: $e")
                runOnUiThread {
                    findViewById<ProgressBar>(R.id.progressBar2).visibility =
                        View.GONE // Hide the ProgressBar

                    //  Toast.makeText(this@MainActivity, "Failed to retrieve data", Toast.LENGTH_SHORT)
                    //    .show()
                }
            }

            override fun onResponse(call: okhttp3.Call, response: okhttp3.Response) {
                runOnUiThread {
                    findViewById<ProgressBar>(R.id.progressBar2).visibility =
                        View.GONE // Hide the ProgressBar
                }
                if (response.isSuccessful) {
                    response.body()?.let { responseBody ->
                        val responseString = responseBody.string()
                        handleResponse(responseString)
                    } ?: run {
                        runOnUiThread {
                            Toast.makeText(
                                this@MainActivity,
                                "Response body is null",
                                Toast.LENGTH_SHORT
                            ).show()
                        }
                    }
                } else {
                    runOnUiThread {
                        Toast.makeText(
                            this@MainActivity,
                            "Error: Unable to retrieve data",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                }
            }
        })
    }

    private fun handleResponse(responseBody: String) {
        val jsonObject = JSONObject(responseBody)
        if (jsonObject.getString("status") == "success") {
            val dataArray = jsonObject.getJSONArray("data")
            val userDetails = StringBuilder()

            // Retrieve user type from SharedPreferences
            val sharedPreferences =
                getSharedPreferences("com.advocatepedia.search", Context.MODE_PRIVATE)
            val userType = sharedPreferences.getString("type2", null)
            val name = sharedPreferences.getString("name", null)
            val address = sharedPreferences.getString("address", null)

            if (userType == "Advocate") {
                // Loop through the data and show details for Advocates
                for (i in 0 until dataArray.length()) {
                    val data = dataArray.getJSONObject(i)



                    val firstName = data.getString("first_name")
                    val userCollege = data.getString("user_college")
                    val court = data.getString("court")
                    val phone_number = data.getString("phone_number")

                    userDetails.append("I am $firstName from $userCollege. I am looking for an offline Internship at $court.\n\n")

                    findViewById<Button>(R.id.whatsappButton1).setOnClickListener {
                        shareOnWhatsApp(
                            phone_number,
                            "Hi $firstName, Are you still looking for offline Internship at $court.\n\nPlease contact me.\n\nRegards\n$name\n$address"
                        )
                    }

                }

                // Display the fetched user details
                runOnUiThread {
                    findViewById<TextView>(R.id.wiki_user_text_main).text = userDetails.toString()
                }

            } else {
                // If the user is not an Advocate, prompt for login
                runOnUiThread {
                    findViewById<TextView>(R.id.wiki_user_text_main).text =
                        "Please log in as an Advocate to view details."
                }
            }
        } else {
            runOnUiThread {
                Toast.makeText(this, jsonObject.getString("message"), Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun shareOnWhatsApp(phoneNumber: String, message: String) {
        val sharedPreferences =
            getSharedPreferences("com.advocatepedia.search", Context.MODE_PRIVATE)
        val email = sharedPreferences.getString("email", null)

        if (email != null) {
            val url = "https://wa.me/$phoneNumber?text=${Uri.encode(message)}"
            val intent = Intent(Intent.ACTION_VIEW)
            intent.data = Uri.parse(url)

            try {
                startActivity(intent)
            } catch (e: ActivityNotFoundException) {
                Toast.makeText(this, "WhatsApp not installed.", Toast.LENGTH_SHORT).show()
            } catch (e: Exception) {
                Toast.makeText(this, "An error occurred: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        } else {
            Toast.makeText(this, "Please log in to share via WhatsApp", Toast.LENGTH_SHORT).show()
        }
    }


    override fun onDestroy() {
        super.onDestroy()
        handler.removeCallbacksAndMessages(null)
    }



    private fun fetchJudgmentData() {
        // Show ProgressBar
        runOnUiThread { findViewById<ProgressBar>(R.id.progressBar3).visibility = View.VISIBLE }

        // URL without the court filter
        val url = "https://internship.advocatepedia.com/android/retrieve_judgments.php"

        val request = Request.Builder().url(url).build()

        client.newCall(request).enqueue(object : okhttp3.Callback {
            override fun onFailure(call: okhttp3.Call, e: IOException) {
                Log.e("MainActivity", "Error: $e")
                runOnUiThread {
                    findViewById<ProgressBar>(R.id.progressBar3).visibility = View.GONE
                    //   Toast.makeText(this@MainActivity, "Failed to retrieve data", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onResponse(call: okhttp3.Call, response: okhttp3.Response) {
                runOnUiThread { findViewById<ProgressBar>(R.id.progressBar3).visibility = View.GONE }
                if (response.isSuccessful) {
                    response.body()?.let { responseBody ->
                        val responseString = responseBody.string()
                        handleJudgmentResponse(responseString)
                    }
                } else {
                    Log.e("MainActivity", "Unsuccessful response")
                    runOnUiThread {
                        Toast.makeText(this@MainActivity, "Unsuccessful response", Toast.LENGTH_SHORT).show()
                    }
                }
            }
        })
    }

    private fun handleJudgmentResponse(responseString: String) {
        val jsonArray = JSONArray(responseString)
        val judgments = mutableListOf<String>()
        for (i in 0 until jsonArray.length()) {
            val jsonObject = jsonArray.getJSONObject(i)
            val news = jsonObject.optString("news")
            val date = jsonObject.optString("date")
            val category = jsonObject.optString("category")

            if (news.isNotEmpty()) {
                val judgmentDetail = "News: $news\nDate: $date\nCategory: $category"
                judgments.add(judgmentDetail)
            }
        }
        runOnUiThread {
            displayJudgments(judgments)
        }
    }

    private fun displayJudgments(judgments: List<String>) {
        val judgmentMainTextView = findViewById<TextView>(R.id.judgement_main)
        val shareButton = findViewById<Button>(R.id.whatsappButton5)

        // Display the judgments in the TextView
        if (judgments.isNotEmpty()) {
            judgmentMainTextView.text = judgments.joinToString(separator = "\n\n")
        } else {
            judgmentMainTextView.text = "No judgments available"
        }
        val sharedPreferences =
            getSharedPreferences("com.advocatepedia.search", Context.MODE_PRIVATE)
        val name = sharedPreferences.getString("name", null)
        val address = sharedPreferences.getString("address", null)
        // WhatsApp sharing functionality with custom message
        shareButton.setOnClickListener {
            val customMessage = "Regards\n$name\n$address"
            val shareText = judgments.joinToString(separator = "\n\n") // Join judgments into a single text block
            // Call shareOnWhatsApp with the custom message and the judgment content
            shareOnWhatsApp1(shareText, customMessage )
        }
    }

    private fun shareOnWhatsApp1(customMessage: String, text: String) {
        try {
            val sendIntent = Intent().apply {
                action = Intent.ACTION_SEND
                type = "text/plain"
                putExtra(Intent.EXTRA_TEXT, "$customMessage\n\n$text")  // Combine custom message with the judgments content
                setPackage("com.whatsapp") // Set the package for WhatsApp
            }

            // Start activity to share on WhatsApp
            startActivity(sendIntent)
        } catch (e: Exception) {
            Toast.makeText(this, "WhatsApp not installed.", Toast.LENGTH_SHORT).show()
        }
    }



    // END JUDGMENET

    private fun fetchDailyStoryData() {
        // Show ProgressBar
        runOnUiThread { findViewById<ProgressBar>(R.id.progressBar3).visibility = View.VISIBLE }

        // URL for retrieving daily stories and photos
        val url = "https://internship.advocatepedia.com/android/daily_story.php"

        val request = Request.Builder().url(url).build()

        client.newCall(request).enqueue(object : okhttp3.Callback {
            override fun onFailure(call: okhttp3.Call, e: IOException) {
                Log.e("MainActivity", "Error: $e")
                runOnUiThread {
                    findViewById<ProgressBar>(R.id.progressBar3).visibility = View.GONE
                    // Toast.makeText(this@MainActivity, "Failed to retrieve data", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onResponse(call: okhttp3.Call, response: okhttp3.Response) {
                runOnUiThread { findViewById<ProgressBar>(R.id.progressBar3).visibility = View.GONE }
                if (response.isSuccessful) {
                    response.body()?.let { responseBody ->
                        val responseString = responseBody.string()
                        handleStoryResponse(responseString)
                    }
                } else {
                    Log.e("MainActivity", "Unsuccessful response")
                    runOnUiThread {
                        Toast.makeText(this@MainActivity, "Unsuccessful response", Toast.LENGTH_SHORT).show()
                    }
                }
            }
        })
    }

    private fun handleStoryResponse(responseString: String) {
        val jsonArray = JSONArray(responseString)
        val stories = mutableListOf<StoryItem>()

        for (i in 0 until jsonArray.length()) {
            val jsonObject = jsonArray.getJSONObject(i)
            val title = jsonObject.optString("title")
            val story = jsonObject.optString("story")
            val date = jsonObject.optString("date")
            val category = jsonObject.optString("category")
            val photoUrl = jsonObject.optString("photo")

            if (story.isNotEmpty()) {
                val storyItem = StoryItem(story, date, category, photoUrl, title)
                stories.add(storyItem)
            }
        }
        runOnUiThread { displayStories(stories) }
    }

    private fun displayStories(stories: List<StoryItem>) {
        val titleMainTextView = findViewById<TextView>(R.id.title_story)
        val storyMainTextView = findViewById<TextView>(R.id.story_main)
        val photoImageView = findViewById<ImageView>(R.id.photo_image_view)

        if (stories.isNotEmpty()) {
            val storyText = stories.joinToString(separator = "\n\n") {
                "${it.title}\nStory: ${it.story}\nDate: ${it.date}\nCategory: ${it.category}"
            }

            // Set title text and apply bold and center alignment
            val firstStory = stories.first()
            titleMainTextView.text = firstStory.title

            // Make the title bold and center aligned programmatically
            titleMainTextView.setTypeface(null, Typeface.BOLD)
            titleMainTextView.gravity = Gravity.CENTER
            titleMainTextView.textSize = 18f // Adjust the text size if needed

            // Display the story text
            storyMainTextView.text = storyText

            // For displaying the photo (assuming the photoUrl is valid)
            val imageUrl = firstStory.photoUrl
            if (imageUrl != null && imageUrl.isNotEmpty()) {
                Picasso.get().load(imageUrl).into(photoImageView)  // Using Picasso to load image
            }
        } else {
            storyMainTextView.text = "No stories available"
        }
    }

    // Data class to represent a story item
    data class StoryItem(val story: String, val date: String, val category: String, val photoUrl: String, val title: String)








}
